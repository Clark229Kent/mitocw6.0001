# Problem Set 4A
# Name: Clark

def insert(source_str, insert_str, pos):
    return source_str[:pos]+insert_str+source_str[pos:]


def get_permutations(sequence):
    '''
    Enumerate all permutations of a given string

    sequence (string): an arbitrary string to permute. Assume that it is a
    non-empty string.  

    You MUST use recursion for this part. Non-recursive solutions will not be
    accepted.

    Returns: a list of all permutations of sequence

    Example:
    >>> get_permutations('abc')
    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']

    Note: depending on your implementation, you may return the permutations in
    a different order than what is listed here.
    '''

    # Base case, unit length string
    list = []
    if len(sequence) == 1:
        list.append(sequence)
    else:
        first_letter = sequence[0]
        rest_seq = sequence[1:]
        for word in get_permutations(rest_seq):
            for i in range(len(word) + 1):
                word = insert(rest_seq, first_letter, i)
                list.append(word)
    return list


if __name__ == '__main__':
    print get_permutations("abc")
    print get_permutations("23456")
    print get_permutations("pq")
